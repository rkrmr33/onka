// Code generated by mockery v1.1.1. DO NOT EDIT.

package mocks

import (
	collector "github.com/rkrmr33/onka/daemon/collector"
	command "github.com/rkrmr33/onka/daemon/command"

	context "context"

	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/rkrmr33/onka/pkg/proto/v1alpha1"
)

// Runtime is an autogenerated mock type for the Runtime type
type Runtime struct {
	mock.Mock
}

// CollectStats provides a mock function with given fields: _a0
func (_m *Runtime) CollectStats(_a0 context.Context) (collector.RuntimeStats, error) {
	ret := _m.Called(_a0)

	var r0 collector.RuntimeStats
	if rf, ok := ret.Get(0).(func(context.Context) collector.RuntimeStats); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(collector.RuntimeStats)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *Runtime) Execute(_a0 context.Context, _a1 *command.Task) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *command.Task) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Info provides a mock function with given fields: ctx
func (_m *Runtime) Info(ctx context.Context) (*v1alpha1.RuntimeInfo, error) {
	ret := _m.Called(ctx)

	var r0 *v1alpha1.RuntimeInfo
	if rf, ok := ret.Get(0).(func(context.Context) *v1alpha1.RuntimeInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.RuntimeInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Running provides a mock function with given fields: _a0
func (_m *Runtime) Running(_a0 context.Context) (bool, error) {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields: _a0
func (_m *Runtime) Start(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields: _a0
func (_m *Runtime) Stop(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
