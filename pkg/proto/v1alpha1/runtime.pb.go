// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/proto/v1alpha1/runtime.proto

package v1alpha1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RuntimeState int32

const (
	RuntimeState_RUNTIME_STATE_UNSPECIFIED RuntimeState = 0
	RuntimeState_RUNTIME_STATE_RUNNING     RuntimeState = 1
	RuntimeState_RUNTIME_STATE_STOPPED     RuntimeState = 2
	RuntimeState_RUNTIME_STATE_ERROR       RuntimeState = 3
)

var RuntimeState_name = map[int32]string{
	0: "RUNTIME_STATE_UNSPECIFIED",
	1: "RUNTIME_STATE_RUNNING",
	2: "RUNTIME_STATE_STOPPED",
	3: "RUNTIME_STATE_ERROR",
}

var RuntimeState_value = map[string]int32{
	"RUNTIME_STATE_UNSPECIFIED": 0,
	"RUNTIME_STATE_RUNNING":     1,
	"RUNTIME_STATE_STOPPED":     2,
	"RUNTIME_STATE_ERROR":       3,
}

func (x RuntimeState) String() string {
	return proto.EnumName(RuntimeState_name, int32(x))
}

func (RuntimeState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_92f281e7eb12fd9b, []int{0}
}

type RuntimeInfo struct {
	State RuntimeState `protobuf:"varint,1,opt,name=state,proto3,enum=onka.v1alpha1.RuntimeState" json:"state,omitempty"`
	Cause string       `protobuf:"bytes,2,opt,name=cause,proto3" json:"cause,omitempty"`
	Type  string       `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Types that are valid to be assigned to Runtime:
	//	*RuntimeInfo_DockerMachine
	//	*RuntimeInfo_DockerNative
	Runtime              isRuntimeInfo_Runtime `protobuf_oneof:"runtime"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RuntimeInfo) Reset()         { *m = RuntimeInfo{} }
func (m *RuntimeInfo) String() string { return proto.CompactTextString(m) }
func (*RuntimeInfo) ProtoMessage()    {}
func (*RuntimeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_92f281e7eb12fd9b, []int{0}
}
func (m *RuntimeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuntimeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuntimeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuntimeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuntimeInfo.Merge(m, src)
}
func (m *RuntimeInfo) XXX_Size() int {
	return m.Size()
}
func (m *RuntimeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RuntimeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RuntimeInfo proto.InternalMessageInfo

type isRuntimeInfo_Runtime interface {
	isRuntimeInfo_Runtime()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RuntimeInfo_DockerMachine struct {
	DockerMachine *DockerMachineInfo `protobuf:"bytes,4,opt,name=docker_machine,json=dockerMachine,proto3,oneof" json:"docker_machine,omitempty"`
}
type RuntimeInfo_DockerNative struct {
	DockerNative *DockerNativeInfo `protobuf:"bytes,5,opt,name=docker_native,json=dockerNative,proto3,oneof" json:"docker_native,omitempty"`
}

func (*RuntimeInfo_DockerMachine) isRuntimeInfo_Runtime() {}
func (*RuntimeInfo_DockerNative) isRuntimeInfo_Runtime()  {}

func (m *RuntimeInfo) GetRuntime() isRuntimeInfo_Runtime {
	if m != nil {
		return m.Runtime
	}
	return nil
}

func (m *RuntimeInfo) GetState() RuntimeState {
	if m != nil {
		return m.State
	}
	return RuntimeState_RUNTIME_STATE_UNSPECIFIED
}

func (m *RuntimeInfo) GetCause() string {
	if m != nil {
		return m.Cause
	}
	return ""
}

func (m *RuntimeInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RuntimeInfo) GetDockerMachine() *DockerMachineInfo {
	if x, ok := m.GetRuntime().(*RuntimeInfo_DockerMachine); ok {
		return x.DockerMachine
	}
	return nil
}

func (m *RuntimeInfo) GetDockerNative() *DockerNativeInfo {
	if x, ok := m.GetRuntime().(*RuntimeInfo_DockerNative); ok {
		return x.DockerNative
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RuntimeInfo) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RuntimeInfo_DockerMachine)(nil),
		(*RuntimeInfo_DockerNative)(nil),
	}
}

type DockerMachineInfo struct {
	Driver               string   `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	Mem                  int64    `protobuf:"varint,2,opt,name=mem,proto3" json:"mem,omitempty"`
	Cpu                  int32    `protobuf:"varint,3,opt,name=cpu,proto3" json:"cpu,omitempty"`
	KernelVersion        string   `protobuf:"bytes,4,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty"`
	EngineVersion        string   `protobuf:"bytes,5,opt,name=engine_version,json=engineVersion,proto3" json:"engine_version,omitempty"`
	EngineOsArch         string   `protobuf:"bytes,6,opt,name=engine_os_arch,json=engineOsArch,proto3" json:"engine_os_arch,omitempty"`
	ClientVersion        string   `protobuf:"bytes,7,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	ClientOsArch         string   `protobuf:"bytes,8,opt,name=client_os_arch,json=clientOsArch,proto3" json:"client_os_arch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DockerMachineInfo) Reset()         { *m = DockerMachineInfo{} }
func (m *DockerMachineInfo) String() string { return proto.CompactTextString(m) }
func (*DockerMachineInfo) ProtoMessage()    {}
func (*DockerMachineInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_92f281e7eb12fd9b, []int{1}
}
func (m *DockerMachineInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DockerMachineInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DockerMachineInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DockerMachineInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DockerMachineInfo.Merge(m, src)
}
func (m *DockerMachineInfo) XXX_Size() int {
	return m.Size()
}
func (m *DockerMachineInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DockerMachineInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DockerMachineInfo proto.InternalMessageInfo

func (m *DockerMachineInfo) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *DockerMachineInfo) GetMem() int64 {
	if m != nil {
		return m.Mem
	}
	return 0
}

func (m *DockerMachineInfo) GetCpu() int32 {
	if m != nil {
		return m.Cpu
	}
	return 0
}

func (m *DockerMachineInfo) GetKernelVersion() string {
	if m != nil {
		return m.KernelVersion
	}
	return ""
}

func (m *DockerMachineInfo) GetEngineVersion() string {
	if m != nil {
		return m.EngineVersion
	}
	return ""
}

func (m *DockerMachineInfo) GetEngineOsArch() string {
	if m != nil {
		return m.EngineOsArch
	}
	return ""
}

func (m *DockerMachineInfo) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *DockerMachineInfo) GetClientOsArch() string {
	if m != nil {
		return m.ClientOsArch
	}
	return ""
}

type DockerNativeInfo struct {
	KernelVersion        string   `protobuf:"bytes,1,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty"`
	EngineVersion        string   `protobuf:"bytes,2,opt,name=engine_version,json=engineVersion,proto3" json:"engine_version,omitempty"`
	EngineOsArch         string   `protobuf:"bytes,3,opt,name=engine_os_arch,json=engineOsArch,proto3" json:"engine_os_arch,omitempty"`
	ClientVersion        string   `protobuf:"bytes,4,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	ClientOsArch         string   `protobuf:"bytes,5,opt,name=client_os_arch,json=clientOsArch,proto3" json:"client_os_arch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DockerNativeInfo) Reset()         { *m = DockerNativeInfo{} }
func (m *DockerNativeInfo) String() string { return proto.CompactTextString(m) }
func (*DockerNativeInfo) ProtoMessage()    {}
func (*DockerNativeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_92f281e7eb12fd9b, []int{2}
}
func (m *DockerNativeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DockerNativeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DockerNativeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DockerNativeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DockerNativeInfo.Merge(m, src)
}
func (m *DockerNativeInfo) XXX_Size() int {
	return m.Size()
}
func (m *DockerNativeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DockerNativeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DockerNativeInfo proto.InternalMessageInfo

func (m *DockerNativeInfo) GetKernelVersion() string {
	if m != nil {
		return m.KernelVersion
	}
	return ""
}

func (m *DockerNativeInfo) GetEngineVersion() string {
	if m != nil {
		return m.EngineVersion
	}
	return ""
}

func (m *DockerNativeInfo) GetEngineOsArch() string {
	if m != nil {
		return m.EngineOsArch
	}
	return ""
}

func (m *DockerNativeInfo) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *DockerNativeInfo) GetClientOsArch() string {
	if m != nil {
		return m.ClientOsArch
	}
	return ""
}

func init() {
	proto.RegisterEnum("onka.v1alpha1.RuntimeState", RuntimeState_name, RuntimeState_value)
	proto.RegisterType((*RuntimeInfo)(nil), "onka.v1alpha1.RuntimeInfo")
	proto.RegisterType((*DockerMachineInfo)(nil), "onka.v1alpha1.DockerMachineInfo")
	proto.RegisterType((*DockerNativeInfo)(nil), "onka.v1alpha1.DockerNativeInfo")
}

func init() { proto.RegisterFile("pkg/proto/v1alpha1/runtime.proto", fileDescriptor_92f281e7eb12fd9b) }

var fileDescriptor_92f281e7eb12fd9b = []byte{
	// 490 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0x8e, 0xd2, 0x40,
	0x1c, 0xc7, 0x99, 0x96, 0xb2, 0x32, 0x0b, 0xa4, 0x8e, 0xff, 0xba, 0x31, 0x62, 0x43, 0x34, 0x21,
	0x9b, 0xd8, 0x86, 0xf5, 0xea, 0x65, 0x57, 0xba, 0xda, 0xc3, 0x16, 0x32, 0x80, 0x07, 0x2f, 0x4d,
	0xb7, 0x8c, 0x74, 0x02, 0x9d, 0x36, 0xd3, 0x42, 0x62, 0xe2, 0x03, 0x78, 0xf4, 0xe8, 0x23, 0x79,
	0x34, 0xf1, 0x05, 0x0c, 0xbe, 0x88, 0xe9, 0x4c, 0x21, 0xb0, 0xec, 0x81, 0x13, 0x33, 0x9f, 0xdf,
	0x27, 0xdf, 0xe1, 0x3b, 0x99, 0x42, 0x33, 0x9d, 0xcf, 0xec, 0x94, 0x27, 0x79, 0x62, 0xaf, 0x7a,
	0xc1, 0x22, 0x8d, 0x82, 0x9e, 0xcd, 0x97, 0x2c, 0xa7, 0x31, 0xb1, 0x04, 0x46, 0xcd, 0x84, 0xcd,
	0x03, 0x6b, 0x33, 0xec, 0x7c, 0x57, 0xe0, 0x29, 0x96, 0x82, 0xcb, 0xbe, 0x24, 0xa8, 0x07, 0xb5,
	0x2c, 0x0f, 0x72, 0x62, 0x00, 0x13, 0x74, 0x5b, 0x17, 0xcf, 0xad, 0x3d, 0xdd, 0x2a, 0xd5, 0x51,
	0xa1, 0x60, 0x69, 0xa2, 0xc7, 0x50, 0x0b, 0x83, 0x65, 0x46, 0x0c, 0xc5, 0x04, 0xdd, 0x3a, 0x96,
	0x1b, 0x84, 0x60, 0x35, 0xff, 0x9a, 0x12, 0x43, 0x15, 0x50, 0xac, 0x91, 0x0b, 0x5b, 0xd3, 0x24,
	0x9c, 0x13, 0xee, 0xc7, 0x41, 0x18, 0x51, 0x46, 0x8c, 0xaa, 0x09, 0xba, 0xa7, 0x17, 0xe6, 0x9d,
	0x53, 0xfa, 0x42, 0xba, 0x91, 0x4e, 0xf1, 0xb7, 0x3e, 0x56, 0x70, 0x73, 0xba, 0x0b, 0xd1, 0x35,
	0x2c, 0x81, 0xcf, 0x82, 0x9c, 0xae, 0x88, 0xa1, 0x89, 0xa4, 0x97, 0xf7, 0x26, 0x79, 0x42, 0x29,
	0x83, 0x1a, 0xd3, 0x1d, 0x76, 0x55, 0x87, 0x27, 0xe5, 0xfd, 0x74, 0x7e, 0x28, 0xf0, 0xe1, 0xc1,
	0xc9, 0xe8, 0x29, 0xac, 0x4d, 0x39, 0x5d, 0x11, 0x2e, 0x6e, 0xa4, 0x8e, 0xcb, 0x1d, 0xd2, 0xa1,
	0x1a, 0x93, 0x58, 0x74, 0x56, 0x71, 0xb1, 0x2c, 0x48, 0x98, 0x2e, 0x45, 0x61, 0x0d, 0x17, 0x4b,
	0xf4, 0x1a, 0xb6, 0xe6, 0x84, 0x33, 0xb2, 0xf0, 0x57, 0x84, 0x67, 0x34, 0x61, 0xa2, 0x6f, 0x1d,
	0x37, 0x25, 0xfd, 0x24, 0x61, 0xa1, 0x11, 0x36, 0xa3, 0x8c, 0x6c, 0x35, 0x4d, 0x6a, 0x92, 0x6e,
	0xb4, 0x57, 0x5b, 0x2d, 0xc9, 0xfc, 0x80, 0x87, 0x91, 0x51, 0x13, 0x5a, 0x43, 0xd2, 0x41, 0x76,
	0xc9, 0xc3, 0xa8, 0x08, 0x0b, 0x17, 0x94, 0xb0, 0x7c, 0x1b, 0x76, 0x22, 0xc3, 0x24, 0xdd, 0x09,
	0x2b, 0xb5, 0x4d, 0xd8, 0x03, 0x19, 0x26, 0xa9, 0x0c, 0xeb, 0xfc, 0x01, 0x50, 0xbf, 0x7b, 0x85,
	0xf7, 0xb4, 0x02, 0xc7, 0xb5, 0x52, 0x8e, 0x6b, 0xa5, 0x1e, 0xd5, 0xaa, 0x7a, 0x5c, 0x2b, 0xed,
	0xb0, 0xd5, 0xf9, 0x37, 0xd8, 0xd8, 0x7d, 0xc7, 0xe8, 0x05, 0x3c, 0xc3, 0x13, 0x6f, 0xec, 0xde,
	0x38, 0xfe, 0x68, 0x7c, 0x39, 0x76, 0xfc, 0x89, 0x37, 0x1a, 0x3a, 0xef, 0xdd, 0x6b, 0xd7, 0xe9,
	0xeb, 0x15, 0x74, 0x06, 0x9f, 0xec, 0x8f, 0xf1, 0xc4, 0xf3, 0x5c, 0xef, 0x83, 0x0e, 0x0e, 0x47,
	0xa3, 0xf1, 0x60, 0x38, 0x74, 0xfa, 0xba, 0x82, 0x9e, 0xc1, 0x47, 0xfb, 0x23, 0x07, 0xe3, 0x01,
	0xd6, 0xd5, 0xab, 0x77, 0xbf, 0xd6, 0x6d, 0xf0, 0x7b, 0xdd, 0x06, 0x7f, 0xd7, 0x6d, 0xf0, 0xf3,
	0x5f, 0xbb, 0xf2, 0xf9, 0x7c, 0x46, 0xf3, 0x68, 0x79, 0x6b, 0x85, 0x49, 0x6c, 0x17, 0xcf, 0xf7,
	0x4d, 0x48, 0xc5, 0xaf, 0x7d, 0xf8, 0x31, 0xdf, 0xd6, 0xc4, 0xfe, 0xed, 0xff, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x3a, 0x84, 0x39, 0x46, 0xe9, 0x03, 0x00, 0x00,
}

func (m *RuntimeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuntimeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuntimeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Runtime != nil {
		{
			size := m.Runtime.Size()
			i -= size
			if _, err := m.Runtime.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintRuntime(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cause) > 0 {
		i -= len(m.Cause)
		copy(dAtA[i:], m.Cause)
		i = encodeVarintRuntime(dAtA, i, uint64(len(m.Cause)))
		i--
		dAtA[i] = 0x12
	}
	if m.State != 0 {
		i = encodeVarintRuntime(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RuntimeInfo_DockerMachine) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuntimeInfo_DockerMachine) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DockerMachine != nil {
		{
			size, err := m.DockerMachine.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRuntime(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeInfo_DockerNative) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuntimeInfo_DockerNative) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DockerNative != nil {
		{
			size, err := m.DockerNative.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRuntime(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *DockerMachineInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DockerMachineInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DockerMachineInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ClientOsArch) > 0 {
		i -= len(m.ClientOsArch)
		copy(dAtA[i:], m.ClientOsArch)
		i = encodeVarintRuntime(dAtA, i, uint64(len(m.ClientOsArch)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ClientVersion) > 0 {
		i -= len(m.ClientVersion)
		copy(dAtA[i:], m.ClientVersion)
		i = encodeVarintRuntime(dAtA, i, uint64(len(m.ClientVersion)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EngineOsArch) > 0 {
		i -= len(m.EngineOsArch)
		copy(dAtA[i:], m.EngineOsArch)
		i = encodeVarintRuntime(dAtA, i, uint64(len(m.EngineOsArch)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EngineVersion) > 0 {
		i -= len(m.EngineVersion)
		copy(dAtA[i:], m.EngineVersion)
		i = encodeVarintRuntime(dAtA, i, uint64(len(m.EngineVersion)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.KernelVersion) > 0 {
		i -= len(m.KernelVersion)
		copy(dAtA[i:], m.KernelVersion)
		i = encodeVarintRuntime(dAtA, i, uint64(len(m.KernelVersion)))
		i--
		dAtA[i] = 0x22
	}
	if m.Cpu != 0 {
		i = encodeVarintRuntime(dAtA, i, uint64(m.Cpu))
		i--
		dAtA[i] = 0x18
	}
	if m.Mem != 0 {
		i = encodeVarintRuntime(dAtA, i, uint64(m.Mem))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Driver) > 0 {
		i -= len(m.Driver)
		copy(dAtA[i:], m.Driver)
		i = encodeVarintRuntime(dAtA, i, uint64(len(m.Driver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DockerNativeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DockerNativeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DockerNativeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ClientOsArch) > 0 {
		i -= len(m.ClientOsArch)
		copy(dAtA[i:], m.ClientOsArch)
		i = encodeVarintRuntime(dAtA, i, uint64(len(m.ClientOsArch)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClientVersion) > 0 {
		i -= len(m.ClientVersion)
		copy(dAtA[i:], m.ClientVersion)
		i = encodeVarintRuntime(dAtA, i, uint64(len(m.ClientVersion)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EngineOsArch) > 0 {
		i -= len(m.EngineOsArch)
		copy(dAtA[i:], m.EngineOsArch)
		i = encodeVarintRuntime(dAtA, i, uint64(len(m.EngineOsArch)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EngineVersion) > 0 {
		i -= len(m.EngineVersion)
		copy(dAtA[i:], m.EngineVersion)
		i = encodeVarintRuntime(dAtA, i, uint64(len(m.EngineVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.KernelVersion) > 0 {
		i -= len(m.KernelVersion)
		copy(dAtA[i:], m.KernelVersion)
		i = encodeVarintRuntime(dAtA, i, uint64(len(m.KernelVersion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRuntime(dAtA []byte, offset int, v uint64) int {
	offset -= sovRuntime(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RuntimeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovRuntime(uint64(m.State))
	}
	l = len(m.Cause)
	if l > 0 {
		n += 1 + l + sovRuntime(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovRuntime(uint64(l))
	}
	if m.Runtime != nil {
		n += m.Runtime.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RuntimeInfo_DockerMachine) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DockerMachine != nil {
		l = m.DockerMachine.Size()
		n += 1 + l + sovRuntime(uint64(l))
	}
	return n
}
func (m *RuntimeInfo_DockerNative) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DockerNative != nil {
		l = m.DockerNative.Size()
		n += 1 + l + sovRuntime(uint64(l))
	}
	return n
}
func (m *DockerMachineInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Driver)
	if l > 0 {
		n += 1 + l + sovRuntime(uint64(l))
	}
	if m.Mem != 0 {
		n += 1 + sovRuntime(uint64(m.Mem))
	}
	if m.Cpu != 0 {
		n += 1 + sovRuntime(uint64(m.Cpu))
	}
	l = len(m.KernelVersion)
	if l > 0 {
		n += 1 + l + sovRuntime(uint64(l))
	}
	l = len(m.EngineVersion)
	if l > 0 {
		n += 1 + l + sovRuntime(uint64(l))
	}
	l = len(m.EngineOsArch)
	if l > 0 {
		n += 1 + l + sovRuntime(uint64(l))
	}
	l = len(m.ClientVersion)
	if l > 0 {
		n += 1 + l + sovRuntime(uint64(l))
	}
	l = len(m.ClientOsArch)
	if l > 0 {
		n += 1 + l + sovRuntime(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DockerNativeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KernelVersion)
	if l > 0 {
		n += 1 + l + sovRuntime(uint64(l))
	}
	l = len(m.EngineVersion)
	if l > 0 {
		n += 1 + l + sovRuntime(uint64(l))
	}
	l = len(m.EngineOsArch)
	if l > 0 {
		n += 1 + l + sovRuntime(uint64(l))
	}
	l = len(m.ClientVersion)
	if l > 0 {
		n += 1 + l + sovRuntime(uint64(l))
	}
	l = len(m.ClientOsArch)
	if l > 0 {
		n += 1 + l + sovRuntime(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRuntime(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRuntime(x uint64) (n int) {
	return sovRuntime(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RuntimeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRuntime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuntimeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuntimeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= RuntimeState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cause = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DockerMachine", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DockerMachineInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Runtime = &RuntimeInfo_DockerMachine{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DockerNative", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DockerNativeInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Runtime = &RuntimeInfo_DockerNative{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRuntime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRuntime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DockerMachineInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRuntime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DockerMachineInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DockerMachineInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Driver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Driver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mem", wireType)
			}
			m.Mem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mem |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			m.Cpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cpu |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KernelVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EngineVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EngineVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EngineOsArch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EngineOsArch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientOsArch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientOsArch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRuntime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRuntime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DockerNativeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRuntime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DockerNativeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DockerNativeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KernelVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EngineVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EngineVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EngineOsArch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EngineOsArch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientOsArch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientOsArch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRuntime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRuntime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRuntime(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRuntime
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRuntime
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRuntime
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRuntime
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRuntime        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRuntime          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRuntime = fmt.Errorf("proto: unexpected end of group")
)
