// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/proto/v1alpha1/daemon.proto

package v1alpha1

import (
	context "context"
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Stream int32

const (
	Stream_OUT Stream = 0
	Stream_ERR Stream = 1
	Stream_IN  Stream = 2
)

var Stream_name = map[int32]string{
	0: "OUT",
	1: "ERR",
	2: "IN",
}

var Stream_value = map[string]int32{
	"OUT": 0,
	"ERR": 1,
	"IN":  2,
}

func (x Stream) String() string {
	return proto.EnumName(Stream_name, int32(x))
}

func (Stream) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_df380c7fab2eec10, []int{0}
}

type InfoRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoRequest) Reset()         { *m = InfoRequest{} }
func (m *InfoRequest) String() string { return proto.CompactTextString(m) }
func (*InfoRequest) ProtoMessage()    {}
func (*InfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df380c7fab2eec10, []int{0}
}
func (m *InfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoRequest.Merge(m, src)
}
func (m *InfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *InfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InfoRequest proto.InternalMessageInfo

type InfoResponse struct {
	DaemonVersion        string       `protobuf:"bytes,1,opt,name=daemon_version,json=daemonVersion,proto3" json:"daemon_version,omitempty"`
	Runtime              *RuntimeInfo `protobuf:"bytes,3,opt,name=runtime,proto3" json:"runtime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *InfoResponse) Reset()         { *m = InfoResponse{} }
func (m *InfoResponse) String() string { return proto.CompactTextString(m) }
func (*InfoResponse) ProtoMessage()    {}
func (*InfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df380c7fab2eec10, []int{1}
}
func (m *InfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoResponse.Merge(m, src)
}
func (m *InfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *InfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InfoResponse proto.InternalMessageInfo

func (m *InfoResponse) GetDaemonVersion() string {
	if m != nil {
		return m.DaemonVersion
	}
	return ""
}

func (m *InfoResponse) GetRuntime() *RuntimeInfo {
	if m != nil {
		return m.Runtime
	}
	return nil
}

type RunTaskRequest struct {
	Task                 *Task    `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	Watch                bool     `protobuf:"varint,2,opt,name=watch,proto3" json:"watch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunTaskRequest) Reset()         { *m = RunTaskRequest{} }
func (m *RunTaskRequest) String() string { return proto.CompactTextString(m) }
func (*RunTaskRequest) ProtoMessage()    {}
func (*RunTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df380c7fab2eec10, []int{2}
}
func (m *RunTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunTaskRequest.Merge(m, src)
}
func (m *RunTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *RunTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunTaskRequest proto.InternalMessageInfo

func (m *RunTaskRequest) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *RunTaskRequest) GetWatch() bool {
	if m != nil {
		return m.Watch
	}
	return false
}

type RunTaskResponse struct {
	// Types that are valid to be assigned to Event:
	//	*RunTaskResponse_LogEvent
	//	*RunTaskResponse_StatusEvent
	Event                isRunTaskResponse_Event `protobuf_oneof:"event"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *RunTaskResponse) Reset()         { *m = RunTaskResponse{} }
func (m *RunTaskResponse) String() string { return proto.CompactTextString(m) }
func (*RunTaskResponse) ProtoMessage()    {}
func (*RunTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df380c7fab2eec10, []int{3}
}
func (m *RunTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunTaskResponse.Merge(m, src)
}
func (m *RunTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *RunTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RunTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RunTaskResponse proto.InternalMessageInfo

type isRunTaskResponse_Event interface {
	isRunTaskResponse_Event()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RunTaskResponse_LogEvent struct {
	LogEvent *LogEntry `protobuf:"bytes,1,opt,name=log_event,json=logEvent,proto3,oneof" json:"log_event,omitempty"`
}
type RunTaskResponse_StatusEvent struct {
	StatusEvent *TaskStatus `protobuf:"bytes,2,opt,name=status_event,json=statusEvent,proto3,oneof" json:"status_event,omitempty"`
}

func (*RunTaskResponse_LogEvent) isRunTaskResponse_Event()    {}
func (*RunTaskResponse_StatusEvent) isRunTaskResponse_Event() {}

func (m *RunTaskResponse) GetEvent() isRunTaskResponse_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *RunTaskResponse) GetLogEvent() *LogEntry {
	if x, ok := m.GetEvent().(*RunTaskResponse_LogEvent); ok {
		return x.LogEvent
	}
	return nil
}

func (m *RunTaskResponse) GetStatusEvent() *TaskStatus {
	if x, ok := m.GetEvent().(*RunTaskResponse_StatusEvent); ok {
		return x.StatusEvent
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RunTaskResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RunTaskResponse_LogEvent)(nil),
		(*RunTaskResponse_StatusEvent)(nil),
	}
}

type LogEntry struct {
	Data                 []byte           `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Stream               Stream           `protobuf:"varint,2,opt,name=stream,proto3,enum=onka.v1alpha1.Stream" json:"stream,omitempty"`
	Timestamp            *types.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *LogEntry) Reset()         { *m = LogEntry{} }
func (m *LogEntry) String() string { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()    {}
func (*LogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_df380c7fab2eec10, []int{4}
}
func (m *LogEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogEntry.Merge(m, src)
}
func (m *LogEntry) XXX_Size() int {
	return m.Size()
}
func (m *LogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LogEntry proto.InternalMessageInfo

func (m *LogEntry) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LogEntry) GetStream() Stream {
	if m != nil {
		return m.Stream
	}
	return Stream_OUT
}

func (m *LogEntry) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type StopRuntimeRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopRuntimeRequest) Reset()         { *m = StopRuntimeRequest{} }
func (m *StopRuntimeRequest) String() string { return proto.CompactTextString(m) }
func (*StopRuntimeRequest) ProtoMessage()    {}
func (*StopRuntimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df380c7fab2eec10, []int{5}
}
func (m *StopRuntimeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopRuntimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopRuntimeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopRuntimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopRuntimeRequest.Merge(m, src)
}
func (m *StopRuntimeRequest) XXX_Size() int {
	return m.Size()
}
func (m *StopRuntimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopRuntimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopRuntimeRequest proto.InternalMessageInfo

type StopRuntimeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopRuntimeResponse) Reset()         { *m = StopRuntimeResponse{} }
func (m *StopRuntimeResponse) String() string { return proto.CompactTextString(m) }
func (*StopRuntimeResponse) ProtoMessage()    {}
func (*StopRuntimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df380c7fab2eec10, []int{6}
}
func (m *StopRuntimeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopRuntimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopRuntimeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopRuntimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopRuntimeResponse.Merge(m, src)
}
func (m *StopRuntimeResponse) XXX_Size() int {
	return m.Size()
}
func (m *StopRuntimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StopRuntimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StopRuntimeResponse proto.InternalMessageInfo

type StartRuntimeRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartRuntimeRequest) Reset()         { *m = StartRuntimeRequest{} }
func (m *StartRuntimeRequest) String() string { return proto.CompactTextString(m) }
func (*StartRuntimeRequest) ProtoMessage()    {}
func (*StartRuntimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df380c7fab2eec10, []int{7}
}
func (m *StartRuntimeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartRuntimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartRuntimeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartRuntimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartRuntimeRequest.Merge(m, src)
}
func (m *StartRuntimeRequest) XXX_Size() int {
	return m.Size()
}
func (m *StartRuntimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartRuntimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartRuntimeRequest proto.InternalMessageInfo

type StartRuntimeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartRuntimeResponse) Reset()         { *m = StartRuntimeResponse{} }
func (m *StartRuntimeResponse) String() string { return proto.CompactTextString(m) }
func (*StartRuntimeResponse) ProtoMessage()    {}
func (*StartRuntimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df380c7fab2eec10, []int{8}
}
func (m *StartRuntimeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartRuntimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartRuntimeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartRuntimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartRuntimeResponse.Merge(m, src)
}
func (m *StartRuntimeResponse) XXX_Size() int {
	return m.Size()
}
func (m *StartRuntimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartRuntimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartRuntimeResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("onka.v1alpha1.Stream", Stream_name, Stream_value)
	proto.RegisterType((*InfoRequest)(nil), "onka.v1alpha1.InfoRequest")
	proto.RegisterType((*InfoResponse)(nil), "onka.v1alpha1.InfoResponse")
	proto.RegisterType((*RunTaskRequest)(nil), "onka.v1alpha1.RunTaskRequest")
	proto.RegisterType((*RunTaskResponse)(nil), "onka.v1alpha1.RunTaskResponse")
	proto.RegisterType((*LogEntry)(nil), "onka.v1alpha1.LogEntry")
	proto.RegisterType((*StopRuntimeRequest)(nil), "onka.v1alpha1.StopRuntimeRequest")
	proto.RegisterType((*StopRuntimeResponse)(nil), "onka.v1alpha1.StopRuntimeResponse")
	proto.RegisterType((*StartRuntimeRequest)(nil), "onka.v1alpha1.StartRuntimeRequest")
	proto.RegisterType((*StartRuntimeResponse)(nil), "onka.v1alpha1.StartRuntimeResponse")
}

func init() { proto.RegisterFile("pkg/proto/v1alpha1/daemon.proto", fileDescriptor_df380c7fab2eec10) }

var fileDescriptor_df380c7fab2eec10 = []byte{
	// 560 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xc7, 0xb3, 0x69, 0x9a, 0x3f, 0x93, 0x3f, 0xbf, 0x68, 0x9b, 0xfe, 0x08, 0x46, 0x4d, 0x83,
	0x11, 0x22, 0xaa, 0x54, 0x9b, 0x06, 0x84, 0x38, 0x20, 0x90, 0x2a, 0x22, 0xb5, 0x08, 0x51, 0x69,
	0x13, 0x40, 0xe2, 0x52, 0x6d, 0xd2, 0xad, 0x13, 0x25, 0xf1, 0x1a, 0x7b, 0x1d, 0xc4, 0x13, 0x70,
	0xe7, 0xc4, 0x23, 0x21, 0x71, 0xe1, 0x11, 0x50, 0x78, 0x11, 0xe4, 0xdd, 0x75, 0x48, 0xec, 0xd0,
	0x93, 0x77, 0x67, 0x3e, 0xf3, 0x9d, 0xd9, 0x99, 0x91, 0xe1, 0xd0, 0x9b, 0x3a, 0xb6, 0xe7, 0x73,
	0xc1, 0xed, 0xc5, 0x09, 0x9d, 0x79, 0x63, 0x7a, 0x62, 0x5f, 0x51, 0x36, 0xe7, 0xae, 0x25, 0xad,
	0xb8, 0xca, 0xdd, 0x29, 0xb5, 0x62, 0x9f, 0x71, 0xb0, 0x85, 0x17, 0x34, 0x98, 0x2a, 0xda, 0x68,
	0x6f, 0x71, 0xfb, 0xa1, 0x2b, 0x26, 0x73, 0xa6, 0x89, 0x43, 0x87, 0x73, 0x67, 0xc6, 0x14, 0x34,
	0x0c, 0xaf, 0xed, 0xc8, 0x17, 0x08, 0x3a, 0xf7, 0x14, 0x60, 0x56, 0xa1, 0x7c, 0xee, 0x5e, 0x73,
	0xc2, 0x3e, 0x86, 0x2c, 0x10, 0xe6, 0x14, 0x2a, 0xea, 0x1a, 0x78, 0xdc, 0x0d, 0x18, 0xbe, 0x0f,
	0x35, 0x55, 0xdf, 0xe5, 0x82, 0xf9, 0xc1, 0x84, 0xbb, 0x4d, 0xd4, 0x46, 0x9d, 0x12, 0xa9, 0x2a,
	0xeb, 0x3b, 0x65, 0xc4, 0x8f, 0xa1, 0xa0, 0xf3, 0x36, 0x77, 0xda, 0xa8, 0x53, 0xee, 0x1a, 0xd6,
	0xc6, 0x43, 0x2c, 0xa2, 0xbc, 0x52, 0x3b, 0x46, 0xcd, 0x0b, 0xa8, 0x91, 0xd0, 0x1d, 0xd0, 0x60,
	0xaa, 0xd3, 0xe3, 0x07, 0x90, 0x8b, 0x9e, 0x27, 0x93, 0x94, 0xbb, 0x7b, 0x09, 0x11, 0x49, 0x4a,
	0x00, 0x37, 0x60, 0xf7, 0x13, 0x15, 0xa3, 0x71, 0x33, 0xdb, 0x46, 0x9d, 0x22, 0x51, 0x17, 0xf3,
	0x2b, 0x82, 0xff, 0x56, 0x8a, 0xfa, 0x05, 0x4f, 0xa0, 0x34, 0xe3, 0xce, 0x25, 0x5b, 0x30, 0x57,
	0x68, 0xdd, 0x5b, 0x09, 0xdd, 0xd7, 0xdc, 0xe9, 0xb9, 0xc2, 0xff, 0x7c, 0x96, 0x21, 0xc5, 0x19,
	0x77, 0x7a, 0x11, 0x8a, 0x9f, 0x43, 0x25, 0x10, 0x54, 0x84, 0x81, 0x0e, 0xcd, 0xca, 0xd0, 0xdb,
	0x5b, 0x4a, 0xea, 0x4b, 0xec, 0x2c, 0x43, 0xca, 0x2a, 0x40, 0xc6, 0x9f, 0x16, 0x60, 0x57, 0x06,
	0x9a, 0x5f, 0x10, 0x14, 0xe3, 0x0c, 0x18, 0x43, 0xee, 0x8a, 0x0a, 0x2a, 0x0b, 0xa9, 0x10, 0x79,
	0xc6, 0xc7, 0x90, 0x0f, 0x84, 0xcf, 0xe8, 0x5c, 0xe6, 0xa8, 0x75, 0xf7, 0x13, 0x39, 0xfa, 0xd2,
	0x49, 0x34, 0x84, 0x9f, 0x42, 0x69, 0x35, 0xc4, 0x55, 0xb7, 0xd5, 0x98, 0xad, 0x78, 0xcc, 0xd6,
	0x20, 0x26, 0xc8, 0x5f, 0xd8, 0x6c, 0x00, 0xee, 0x0b, 0xee, 0xe9, 0x59, 0xc4, 0x23, 0xdf, 0x87,
	0xbd, 0x0d, 0xab, 0xea, 0x9b, 0x32, 0x53, 0x5f, 0x24, 0xe8, 0xff, 0xa1, 0xb1, 0x69, 0x56, 0xf8,
	0x91, 0x09, 0x79, 0x55, 0x27, 0x2e, 0xc0, 0xce, 0xc5, 0xdb, 0x41, 0x3d, 0x13, 0x1d, 0x7a, 0x84,
	0xd4, 0x11, 0xce, 0x43, 0xf6, 0xfc, 0x4d, 0x3d, 0xdb, 0xfd, 0x91, 0x85, 0xea, 0x4b, 0xb9, 0x37,
	0x7d, 0xe6, 0x2f, 0x26, 0x23, 0x86, 0x5f, 0x41, 0x41, 0xcf, 0x0b, 0x1f, 0xa4, 0x37, 0x66, 0x6d,
	0x33, 0x8c, 0xd6, 0xbf, 0xdc, 0x2a, 0xff, 0x43, 0x84, 0x5f, 0x40, 0x2e, 0x5a, 0x2f, 0x9c, 0x5c,
	0xbd, 0xb5, 0xf5, 0x36, 0xee, 0x6c, 0xf5, 0xe9, 0x4d, 0x19, 0x40, 0x79, 0xad, 0x11, 0xf8, 0x6e,
	0x6a, 0x0c, 0xc9, 0xd6, 0x19, 0xe6, 0x4d, 0x88, 0x56, 0x7d, 0x0f, 0x95, 0xf5, 0x86, 0xe1, 0x74,
	0x4c, 0xaa, 0xc9, 0xc6, 0xbd, 0x1b, 0x19, 0x25, 0x7c, 0xfa, 0xec, 0xfb, 0xb2, 0x85, 0x7e, 0x2e,
	0x5b, 0xe8, 0xd7, 0xb2, 0x85, 0xbe, 0xfd, 0x6e, 0x65, 0x3e, 0x1c, 0x39, 0x13, 0x31, 0x0e, 0x87,
	0xd6, 0x88, 0xcf, 0xed, 0x48, 0xe0, 0x78, 0x34, 0x91, 0x5f, 0x3b, 0xfd, 0x9b, 0x18, 0xe6, 0xe5,
	0xfd, 0xd1, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1e, 0x5a, 0xc5, 0x09, 0x92, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DaemonServiceClient is the client API for DaemonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DaemonServiceClient interface {
	RunTask(ctx context.Context, in *RunTaskRequest, opts ...grpc.CallOption) (DaemonService_RunTaskClient, error)
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	StopRuntime(ctx context.Context, in *StopRuntimeRequest, opts ...grpc.CallOption) (*StopRuntimeResponse, error)
	StartRuntime(ctx context.Context, in *StartRuntimeRequest, opts ...grpc.CallOption) (*StartRuntimeResponse, error)
}

type daemonServiceClient struct {
	cc *grpc.ClientConn
}

func NewDaemonServiceClient(cc *grpc.ClientConn) DaemonServiceClient {
	return &daemonServiceClient{cc}
}

func (c *daemonServiceClient) RunTask(ctx context.Context, in *RunTaskRequest, opts ...grpc.CallOption) (DaemonService_RunTaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DaemonService_serviceDesc.Streams[0], "/onka.v1alpha1.DaemonService/RunTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &daemonServiceRunTaskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DaemonService_RunTaskClient interface {
	Recv() (*RunTaskResponse, error)
	grpc.ClientStream
}

type daemonServiceRunTaskClient struct {
	grpc.ClientStream
}

func (x *daemonServiceRunTaskClient) Recv() (*RunTaskResponse, error) {
	m := new(RunTaskResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *daemonServiceClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/onka.v1alpha1.DaemonService/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonServiceClient) StopRuntime(ctx context.Context, in *StopRuntimeRequest, opts ...grpc.CallOption) (*StopRuntimeResponse, error) {
	out := new(StopRuntimeResponse)
	err := c.cc.Invoke(ctx, "/onka.v1alpha1.DaemonService/StopRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonServiceClient) StartRuntime(ctx context.Context, in *StartRuntimeRequest, opts ...grpc.CallOption) (*StartRuntimeResponse, error) {
	out := new(StartRuntimeResponse)
	err := c.cc.Invoke(ctx, "/onka.v1alpha1.DaemonService/StartRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DaemonServiceServer is the server API for DaemonService service.
type DaemonServiceServer interface {
	RunTask(*RunTaskRequest, DaemonService_RunTaskServer) error
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	StopRuntime(context.Context, *StopRuntimeRequest) (*StopRuntimeResponse, error)
	StartRuntime(context.Context, *StartRuntimeRequest) (*StartRuntimeResponse, error)
}

// UnimplementedDaemonServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDaemonServiceServer struct {
}

func (*UnimplementedDaemonServiceServer) RunTask(req *RunTaskRequest, srv DaemonService_RunTaskServer) error {
	return status.Errorf(codes.Unimplemented, "method RunTask not implemented")
}
func (*UnimplementedDaemonServiceServer) Info(ctx context.Context, req *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (*UnimplementedDaemonServiceServer) StopRuntime(ctx context.Context, req *StopRuntimeRequest) (*StopRuntimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRuntime not implemented")
}
func (*UnimplementedDaemonServiceServer) StartRuntime(ctx context.Context, req *StartRuntimeRequest) (*StartRuntimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRuntime not implemented")
}

func RegisterDaemonServiceServer(s *grpc.Server, srv DaemonServiceServer) {
	s.RegisterService(&_DaemonService_serviceDesc, srv)
}

func _DaemonService_RunTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunTaskRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DaemonServiceServer).RunTask(m, &daemonServiceRunTaskServer{stream})
}

type DaemonService_RunTaskServer interface {
	Send(*RunTaskResponse) error
	grpc.ServerStream
}

type daemonServiceRunTaskServer struct {
	grpc.ServerStream
}

func (x *daemonServiceRunTaskServer) Send(m *RunTaskResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DaemonService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onka.v1alpha1.DaemonService/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServiceServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonService_StopRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRuntimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServiceServer).StopRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onka.v1alpha1.DaemonService/StopRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServiceServer).StopRuntime(ctx, req.(*StopRuntimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonService_StartRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRuntimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServiceServer).StartRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onka.v1alpha1.DaemonService/StartRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServiceServer).StartRuntime(ctx, req.(*StartRuntimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DaemonService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "onka.v1alpha1.DaemonService",
	HandlerType: (*DaemonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _DaemonService_Info_Handler,
		},
		{
			MethodName: "StopRuntime",
			Handler:    _DaemonService_StopRuntime_Handler,
		},
		{
			MethodName: "StartRuntime",
			Handler:    _DaemonService_StartRuntime_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunTask",
			Handler:       _DaemonService_RunTask_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/v1alpha1/daemon.proto",
}

func (m *InfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *InfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Runtime != nil {
		{
			size, err := m.Runtime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDaemon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DaemonVersion) > 0 {
		i -= len(m.DaemonVersion)
		copy(dAtA[i:], m.DaemonVersion)
		i = encodeVarintDaemon(dAtA, i, uint64(len(m.DaemonVersion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RunTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Watch {
		i--
		if m.Watch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Task != nil {
		{
			size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDaemon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RunTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Event != nil {
		{
			size := m.Event.Size()
			i -= size
			if _, err := m.Event.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *RunTaskResponse_LogEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunTaskResponse_LogEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogEvent != nil {
		{
			size, err := m.LogEvent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDaemon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *RunTaskResponse_StatusEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunTaskResponse_StatusEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StatusEvent != nil {
		{
			size, err := m.StatusEvent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDaemon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *LogEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDaemon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Stream != 0 {
		i = encodeVarintDaemon(dAtA, i, uint64(m.Stream))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintDaemon(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StopRuntimeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopRuntimeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StopRuntimeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *StopRuntimeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopRuntimeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StopRuntimeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *StartRuntimeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartRuntimeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartRuntimeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *StartRuntimeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartRuntimeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartRuntimeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintDaemon(dAtA []byte, offset int, v uint64) int {
	offset -= sovDaemon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DaemonVersion)
	if l > 0 {
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.Runtime != nil {
		l = m.Runtime.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RunTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.Watch {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RunTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		n += m.Event.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RunTaskResponse_LogEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogEvent != nil {
		l = m.LogEvent.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	return n
}
func (m *RunTaskResponse_StatusEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatusEvent != nil {
		l = m.StatusEvent.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	return n
}
func (m *LogEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.Stream != 0 {
		n += 1 + sovDaemon(uint64(m.Stream))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StopRuntimeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StopRuntimeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StartRuntimeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StartRuntimeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDaemon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDaemon(x uint64) (n int) {
	return sovDaemon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaemonVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDaemon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DaemonVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runtime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDaemon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Runtime == nil {
				m.Runtime = &RuntimeInfo{}
			}
			if err := m.Runtime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDaemon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &Task{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Watch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Watch = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDaemon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LogEntry{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &RunTaskResponse_LogEvent{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDaemon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TaskStatus{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &RunTaskResponse_StatusEvent{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDaemon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stream", wireType)
			}
			m.Stream = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stream |= Stream(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDaemon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopRuntimeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopRuntimeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopRuntimeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopRuntimeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopRuntimeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopRuntimeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartRuntimeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartRuntimeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartRuntimeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartRuntimeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartRuntimeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartRuntimeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDaemon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDaemon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDaemon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDaemon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDaemon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDaemon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDaemon = fmt.Errorf("proto: unexpected end of group")
)
